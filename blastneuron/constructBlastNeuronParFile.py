# Ajayrama Kumaraswamy, 2017, LMU Munich

"""
Description:        This script is used to generate a parameter file required to run blastNeuron.py.
                    This parameter file should contain a json string of a list of dictionaries.
                    Each dictionary is one blastNeuron alignment job that contains
                    blastNeuron parameters. See core/blastNeuronPars.py for the description of the parameters.

Usage:              python <path to file>constructBlastNeuronParFile.py

Action:             creates a parameter file for blastNeuron.py

Usage guidelines:   There are a couple of cases with examples shown below.
                    Read the comments therein.
                    Essentially edit the values of some variables in this script and run it.


"""
import os
import json
from blastneuron.blastNeuronPars import blastNeuronParNames

# obtaining the directory path containing the folder containing this file
# temp = os.path.split(os.path.abspath(__file__))[0]
# temp1 = os.path.split(temp)[0]

temp1 = "/home/aj/DataAndResults/morphology/"


# **********************************************************************************************************************


# # Case 2: Default or user defined parameters above, one reference SWC and several test SWCs, all in the same folder.
# # dirPath: directory containing the reference SWC and the test SWCs
# # refSWC: the reference SWC
# # testSWCFiles: file names of test SWC files in dirPath
# # parameter file generated by this script
# # parFile: the parameter file will be generated at this file path.
# # resPath: the testSWCs registered to the reference SWC will be generated in this directory when RegMaxS.py is run
# # with the parameter file generated by this running this script.
#
# # Usage: Replace dirPath, refSWC, expNames, resPath and parFile as required and run this file to generate parFile
# # Then run python <...>/RegMaxS.py parFile
# # -------------------------------------------
# dirPath = os.path.join(temp1, 'OriginalData', "chiangLLC")


# # refSWC = os.path.join(dirPath, 'Gad1-F-000062_Standardized.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangLLC")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangLLC.json')


# # refSWC = os.path.join(dirPath, 'Gad1-F-000062.CNG.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangLLC_Gad1-F-000062.CNG")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangLLC_Gad1-F-000062.CNG.json')

# # refSWC = os.path.join(dirPath, 'Cha-F-000018.CNG.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangLLC_Cha-F-000018.CNG")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangLLC_Cha-F-000018.CNG.json')

# refSWC = os.path.join(dirPath, 'Cha-F-300331.CNG.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangLLC_Cha-F-300331.CNG")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangLLC_Cha-F-300331.CNG.json')


# testSWCFiles = [
#     'Gad1-F-000062_Standardized',
#     'Gad1-F-000062.CNG',
#     'Cha-F-000012.CNG',
#     'Cha-F-300331.CNG',
#     'Gad1-F-600000.CNG',
#     'Cha-F-000018.CNG',
#     'Cha-F-300051.CNG',
#     'Cha-F-400051.CNG',
#     'Cha-F-200000.CNG'
#             ]
#
# # -------------------------------------------

dirPath = os.path.join(temp1, 'OriginalData', 'chiangOMB')

# refSWC = os.path.join(dirPath, 'VGlut-F-500085_Standardized.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangOMB")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOMB.json')

# refSWC = os.path.join(dirPath, 'VGlut-F-500085.CNG.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangOMB_VGlut-F-500085.CNG")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOMB_VGlut-F-500085.CNG.json')

# refSWC = os.path.join(dirPath, 'VGlut-F-500031.CNG.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangOMB_VGlut-F-500031.CNG")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOMB_VGlut-F-500031.CNG.json')

# refSWC = os.path.join(dirPath, 'VGlut-F-600379.CNG.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangOMB_VGlut-F-600379.CNG")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOMB_VGlut-F-600379.CNG.json')

refSWC = os.path.join(dirPath, 'VGlut-F-500085_Standardized.swc')
resPath = os.path.join(temp1, 'BlastNeuron_likeStandardized', "chiangOMB")
parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOMB_likeStandardized.json')


testSWCFiles = [
            'VGlut-F-500085_Standardized',
            'VGlut-F-500085.CNG',
            'VGlut-F-700500.CNG',
            'VGlut-F-700567.CNG',
            'VGlut-F-500471.CNG',
            'Cha-F-000353.CNG',
            'VGlut-F-600253.CNG',
            'VGlut-F-400434.CNG',
            'VGlut-F-600379.CNG',
            'VGlut-F-700558.CNG',
            'VGlut-F-500183.CNG',
            'VGlut-F-300628.CNG',
            'VGlut-F-500031.CNG',
            'VGlut-F-500852.CNG',
            'VGlut-F-600366.CNG'
            ]

# # -------------------------------------------

# dirPath = os.path.join(temp1, 'OriginalData', 'chiangOPSInt')

# refSWC = os.path.join(dirPath, 'Trh-F-000047_Standardized.swc')
# resPath = os.path.join(temp1, 'BlastNeuron', "chiangOPSInt")
# parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOPSInt.json')

# # refSWC = os.path.join(dirPath, 'Trh-F-000047.CNG.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangOPSInt_Trh-F-000047.CNG")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOPSInt_Trh-F-000047.CNG.json')

# # refSWC = os.path.join(dirPath, 'Trh-M-900003.CNG.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangOPSInt_Trh-M-900003.CNG")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOPSInt_Trh-M-900003.CNG.json')

# # refSWC = os.path.join(dirPath, 'Trh-M-100018.CNG.swc')
# # resPath = os.path.join(temp1, 'BlastNeuron', "chiangOPSInt_Trh-M-100018.CNG")
# # parFile = os.path.join(temp1, 'ParFiles', 'BlastNeuron', 'chiangOPSInt_Trh-M-100018.CNG.json')

# testSWCFiles = [
#     'Trh-F-000047_Standardized',
#     'Trh-F-000047.CNG',
#     'Trh-M-000143.CNG',
#     'Trh-F-000092.CNG',
#     'Trh-F-700009.CNG',
#     'Trh-M-000013.CNG',
#     'Trh-M-000146.CNG',
#     'Trh-M-100009.CNG',
#     'Trh-F-000019.CNG',
#     'Trh-M-000081.CNG',
#     'Trh-M-900003.CNG',
#     'Trh-F-200035.CNG',
#     'Trh-F-200015.CNG',
#     'Trh-M-000040.CNG',
#     'Trh-M-600023.CNG',
#     'Trh-M-100048.CNG',
#     'Trh-M-700019.CNG',
#     'Trh-F-100009.CNG',
#     'Trh-M-400000.CNG',
#     'Trh-M-000067.CNG',
#     'Trh-M-000114.CNG',
#     'Trh-M-100018.CNG',
#     'Trh-M-000141.CNG',
#     'Trh-M-900019.CNG',
#     'Trh-M-800002.CNG'
# ]

# # -------------------------------------------
if not os.path.isdir(resPath):
    os.mkdir(resPath)
pars = []
for sfr in testSWCFiles:
    testSWC = os.path.join(dirPath, "{}.swc".format(sfr))
    resFile = os.path.join(resPath, "{}.swc".format(sfr))
    # obtains the list of variables in the current work space
    ns = vars()
    # forms the dictionary of parameters to be saved into the parameter file.
    pars.append({k: ns[k] for k in blastNeuronParNames})
# -------------------------------------------
# **********************************************************************************************************************

# write the parameters into the parameter file.
with open(parFile, 'w') as fle:
    json.dump(pars, fle)
